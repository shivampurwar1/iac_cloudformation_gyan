AWSTemplateFormatVersion: "2010-09-09"
Description: "Basic Template to create EC2, install Terraform, setup directory and config files"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Parent Stacks"
        Parameters:
          - ParentStackName
          - InstanceInSubnet
          - InstanceInAz
      -
        Label:
          default: "EC2 Configuration"
        Parameters:
          - ParameterEC2InstanceType
          - ParameterEC2KeyName
          - ParameterTerraformVersion
Parameters:
  ParentStackName:
    Description: "Add Stack Name to refer Networking related values"
    Type: String
    Default: shared-infrastructure
  InstanceInSubnet:
    Description: "Define Subnet to deploy instances"
    Type: String
    Default: "private"
    AllowedValues:
    - "dmz"
    - "private"
  InstanceInAz:
    Description: "Define AZ to deploy instances"
    Type: String
    Default: "az1"
    AllowedValues:
    - "az1"
    - "az2"
    - "az3"
  ParameterEC2InstanceType:
    Description: "Select EC2 Instance type from Predefined Values"
    Type: String
    Default: "t2.micro"
    AllowedValues:
    - "t2.micro"
    - "t3.micro"
    - "t3.small"
  ParameterEC2KeyName:
    Description: "Name of an Existing EC2 KeyPair to enable SSH to EC2"
    Type: AWS::EC2::KeyPair::KeyName
    Default: "mykey-sandbox"
  ParameterTerraformVersion:
    Description: "Define Terraform version"
    Type: String
    Default: "1.0.2"
    AllowedValues:
    - "1.0.2"
    - "1.0.0"
Conditions:
    IsDMZ: !Equals 
      - !Ref InstanceInSubnet
      - dmz
Mappings:
  MappingsRegionAMI:
    us-east-1:
      AMI: ami-0ab4d1e9cf9a1215a
    ap-south-1:
      AMI: ami-0bcf5425cdc1d8a85
Resources:
  TerraformController:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref ParameterEC2InstanceType
      ImageId:
        Fn::FindInMap:
        - MappingsRegionAMI
        - !Ref AWS::Region
        - AMI
      SecurityGroupIds:
        - Fn::ImportValue: !Sub "${ParentStackName}-${InstanceInSubnet}sg"
      SubnetId:
        Fn::ImportValue: !Sub "${ParentStackName}-${InstanceInSubnet}${InstanceInAz}subnet"
      KeyName: !Ref ParameterEC2KeyName
      UserData:
        'Fn::Base64':
          !Sub |
          #!/bin/bash -xe
          yum -y install nc wget unzip
          wget -P /tmp -c https://releases.hashicorp.com/terraform/${ParameterTerraformVersion}/terraform_${ParameterTerraformVersion}_linux_amd64.zip
          unzip /tmp/terraform_${ParameterTerraformVersion}_linux_amd64.zip -d /bin/
          mkdir -p /opt/terraform/configs
      IamInstanceProfile: !Ref TerraformControllerProfile
      Tags:
        - "Key": "Name"
          "Value": !Join [ "-", [ "TerraformController", !Ref "AWS::StackName" ] ]
  TerraformControllerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Tags:
          - "Key": "Name"
            "Value": !Join [ "-", [ "TerraformController", !Ref "AWS::StackName" ] ]
  TerraformControllerPolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Join [ "-", [ "TerraformController-policy", !Ref "AWS::StackName" ] ]
      PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
        {
          "Effect": "Allow",
          "Action": [
              "ec2:*",
          ],
          "Resource": "*"
        }
        ]
      }
      Roles:
        -
          Ref: "TerraformControllerRole"
  TerraformControllerProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join [ "-", [ "TerraformControllerInstanceProfile", !Ref "AWS::StackName" ] ]
      Path: /
      Roles:
        - !Ref TerraformControllerRole
Outputs:
  TerraformControllerPublicIp:
    Description: "TerraformController IP"
    Value: !GetAtt
      - TerraformController
      - PublicIp
    Condition: IsDMZ
  TerraformControllerPtivateIp:
    Description: "TerraformController Private IP"
    Value: !GetAtt
      - TerraformController
      - PrivateIp
