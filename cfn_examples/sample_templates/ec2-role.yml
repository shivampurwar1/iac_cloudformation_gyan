Description: "Template to test EC2 role"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Parent Stacks"
        Parameters:
          - ParentStackName
          - InstanceInAz
      -
        Label:
          default: "EC2 Configuration"
        Parameters:
          - ParameterEC2InstanceType
          - ParameterEC2KeyName
Parameters:
  ParentStackName:
    Description: "Add Stack Name to refer Networking related values"
    Type: String
    Default: shared-infrastructure
  InstanceInAz:
    Description: "Define AZ to deploy instances"
    Type: String
    Default: "az1"
    AllowedValues:
    - "az1"
    - "az2"
    - "az3"
  ParameterEC2InstanceType:
    Description: "Select EC2 Instance type from Predefined Values"
    Type: String
    Default: "t2.micro"
    AllowedValues:
    - "t2.micro"
    - "t3.micro"
    - "t3.small"
  ParameterEC2KeyName:
    Description: "Name of an Existing EC2 KeyPair to enable SSH to EC2"
    Type: AWS::EC2::KeyPair::KeyName
    Default: "mykey-sandbox"
Mappings:
  MappingsRegionAMI:
    us-east-1:
      AMI: ami-0ab4d1e9cf9a1215a
    ap-south-1:
      AMI: ami-0bcf5425cdc1d8a85
Resources:
  MyEc2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref ParameterEC2InstanceType
      ImageId:
        Fn::FindInMap:
        - MappingsRegionAMI
        - !Ref AWS::Region
        - AMI
      SecurityGroupIds:
        - Fn::ImportValue: !Sub "${ParentStackName}-dmzsg"
        - Fn::ImportValue: !Sub "${ParentStackName}-shareddmzsg"
      SubnetId:
        Fn::ImportValue: !Sub "${ParentStackName}-dmz${InstanceInAz}subnet"
      KeyName: !Ref ParameterEC2KeyName
      UserData:
        'Fn::Base64':
          !Sub |
          #!/bin/bash -xe
          yum install nc -y
      IamInstanceProfile: !Ref MyEc2InstanceProfile
      Tags:
        - "Key": "Name"
          "Value": !Join [ "-", [ MyEc2, !Ref "AWS::StackName" ] ]
  MyEc2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Tags:
          - "Key": "Name"
            "Value": !Join [ "-", [ "MyEc2Role", !Ref "AWS::StackName" ] ]
  MyEc2RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Join [ "-", [ "temp-policy", !Ref "AWS::StackName" ] ]
      PolicyDocument: {
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "ListBucket",
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource": [
                "arn:aws:s3:::iac-team"
            ],
            "Condition": {
                "StringLike": {
                    "s3:prefix": "ansible/*"
                }
            }
        },
        {
            "Sid": "DownloadandUpload",
            "Effect": "Allow",
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:PutObjectAcl",
                "s3:GetObjectVersion"
            ],
            "Resource": [
                "arn:aws:s3:::iac-team/ansible/*"
            ]
        },
        {
            "Sid": "KMSAccess",
            "Effect": "Allow",
            "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey"
            ],
            "Resource": [
                "arn:aws:kms:*::key/*"
            ]
        }
    ]
}
      Roles:
        -
          Ref: "MyEc2Role"
  MyEc2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join [ "-", [ "MyEc2InstanceProfile", !Ref "AWS::StackName" ] ]
      Path: /
      Roles:
        - !Ref MyEc2Role
Outputs:
  MyEc2PublicIp:
    Description: "MyEc2 Public IP"
    Value: !GetAtt
      - MyEc2
      - PublicIp
  MyEc2PtivateIp:
    Description: "MyEc2 Private IP"
    Value: !GetAtt
      - MyEc2
      - PrivateIp
